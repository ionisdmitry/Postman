{
	"info": {
		"_postman_id": "51f209f0-1747-4e1a-b001-8c9684a266d2",
		"name": "Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let login = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token\", login.token);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "password",
							"value": "str",
							"type": "text"
						},
						{
							"key": "login",
							"value": "str",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"let jsondata4 = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"salary_test\", jsondata4.person.u_salary_1_5_year);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"const schema = {\r",
							"\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"let jsondata = pm.response.json();\r",
							"let jsondata1 = JSON.parse(request.data);\r",
							"let jsondata3 = jsondata1.salary * 2;\r",
							"let jsondata5 = jsondata1.salary * 2.9;\r",
							"let jsondata6 = jsondata1.salary * 4;\r",
							"console.log(jsondata1.salary * 2)\r",
							"pm.test(\"правильность перемножения \", function () {\r",
							"    \r",
							"    pm.expect(jsondata.qa_salary_after_6_months).to.eql(jsondata3);\r",
							"    pm.expect(jsondata.qa_salary_after_12_months).to.eql(jsondata5);\r",
							"    pm.expect(jsondata.person.u_salary_1_5_year).to.eql(jsondata6);\r",
							"});\r",
							"console.log(jsondata)\r",
							"console.log(jsondata1)\r",
							"console.log(jsondata5)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": 25,\r\n    \"salary\": 100,\r\n    \"name\": \"Dima\",\r\n    \"auth_token\":\"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"   \r",
							"\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": [\r",
							"          \"integer\",\r",
							"          \"string\"\r",
							"        ]\r",
							"      }\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"\r",
							"}\r",
							"pm.test(\"Validate schema\", () => {\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"let jsondata = pm.response.json();\r",
							"\r",
							"let jsondata3 = jsondata.salary[0] * 2;\r",
							"let jsondata4 = jsondata.salary[0] * 3;\r",
							"console.log(jsondata.salary[2] * 2)\r",
							"pm.test(\"проверка коэффициента \", () => {\r",
							"    pm.expect(parseInt(jsondata.salary[1])).to.eql(jsondata3);\r",
							"    pm.expect(parseInt(jsondata.salary[2])).to.eql(jsondata4);\r",
							"    pm.expect(parseInt(jsondata.salary[2])).to.above(jsondata.salary[0]);\r",
							"    pm.expect(parseInt(jsondata.salary[2])).to.above(parseInt(jsondata.salary[1]));\r",
							"});\r",
							"console.log(jsondata.salary[2])\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "380",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Dima",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"      \"age\": {\r",
							"          \"type\": \"integer\"\r",
							"      },\r",
							"      \"daily_food\": {\r",
							"          \"type\": \"number\"\r",
							"      },\r",
							"      \"daily_sleep\": {\r",
							"          \"type\": \"number\"\r",
							"      },\r",
							"      \"name\": {\r",
							"          \"type\": \"string\"\r",
							"      }\r",
							"      },\r",
							"      \"required\": [\r",
							"          \"age\",\r",
							"          \"daily_food\",\r",
							"          \"daily_sleep\",\r",
							"          \"name\"\r",
							"\r",
							"      ]\r",
							"      \r",
							"}\r",
							"pm.test(\"Проверка структуры JSON\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});      \r",
							"\r",
							"let weight0 = pm.response.json();\r",
							"let weight1 = request.data;\r",
							"let daily_food1 = weight1.weight * 0.012;\r",
							"let daily_sleep1 = weight1.weight * 2.5;\r",
							"console.log(weight1.weight * 0.012)\r",
							"\r",
							"pm.test(\"проверка коэффициентов\", () => {\r",
							"    pm.expect(weight0.daily_food).to.eql(daily_food1);\r",
							"    pm.expect(weight0.daily_sleep).to.eql(daily_sleep1);\r",
							"});\r",
							"        console.log(weight1.weight )  \r",
							"      \r",
							"  \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "78",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Dima",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Проверка структуры JSON\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"let name0 = request.data;\r",
							"postman.setEnvironmentVariable(\"user_name\", name0.name);\r",
							"\r",
							"let name2 = name0.name\r",
							"console.log(name0.name)\r",
							"\r",
							"pm.test(\"check name equal variable username\", function () {\r",
							"    pm.expect(name0.name).to.eql(pm.environment.get('user_name'));\r",
							"});\r",
							"console.log(name2)\r",
							"\r",
							"let age0 = JSON.parse(responseBody);\r",
							"let age1 = request.data;\r",
							"pm.test(\"проверка age\", () => {\r",
							"    pm.expect(age0.age).to.eql(age1.age);\r",
							"})\r",
							"\r",
							"console.log (age0.age)\r",
							"console.log (age1.age)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary_test}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Dima",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "\"/s34lfgbj/str/jjd909/79786kjkWpqc4677str34374evny\"",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					],
					"query": [
						{
							"key": "age",
							"value": "25",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "380",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Dima",
							"disabled": true
						},
						{
							"key": "auth_token",
							"value": "\"/s34lfgbj/str/jjd909/20044kjkWpqc5223str95241evny\"",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"const jsondata = pm.response.json();\r",
							"var i = jsondata.length;\r",
							"console.log(jsondata.length);\r",
							"\r",
							"function getRandomInt(i) {\r",
							"    return Math.floor(Math.random() * i);\r",
							"}\r",
							"console.log(jsondata[getRandomInt(i)]);\r",
							"console.log(jsondata[getRandomInt(i)].Cur_ID);\r",
							"\r",
							"postman.setEnvironmentVariable(\"curr_code\", jsondata[getRandomInt(i)].Cur_ID);\r",
							"//postman.setEnvironmentVariable(\"Cur_ID\", getRandomInt(i)].Cur_ID);\r",
							"\r",
							"// for(let n=0; n<i; n++){\r",
							"//     console.log(jsondata[n].Cur_ID);\r",
							"//    curr_list.push(jsondata[n].Cur_ID);\r",
							"// }\r",
							"\r",
							"\r",
							"// for(let t=0; t<curr_list.length; t++){\r",
							"//    console.log(curr_list[t]);\r",
							"// }\r",
							"\r",
							"// for(let  i=0; i<curr_list.length; i++){\r",
							"//    pm.request(curr_list[i])\r",
							"//    if (response == 200){\r",
							"//        success_curency.push\r",
							"//    }\r",
							"// }\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "\"/s34lfgbj/str/jjd909/79786kjkWpqc4677str34374evny\"",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"Validate schema\", () => {\r",
							"pm.response.to.have.jsonSchema(schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "\"/s34lfgbj/str/jjd909/74979kjkWpqc5392str184592evny\"",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{curr_code}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "age",
			"value": "25"
		},
		{
			"key": "salary",
			"value": "380"
		},
		{
			"key": "name",
			"value": "Dima"
		},
		{
			"key": "auth_token",
			"value": "/s34lfgbj/str/jjd909/20044kjkWpqc5223str95241evny\""
		},
		{
			"key": "weight",
			"value": "78"
		}
	]
}